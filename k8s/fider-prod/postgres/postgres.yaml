---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: postgres-sa
  namespace: fider-prod
  annotations:
    azure.workload.identity/client-id: "9b138bb9-7f52-4a0b-bef0-7786d4f9ef6b"
  labels:
    azure.workload.identity/use: "true"
---
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: azure-kv-database
  namespace: fider-prod
spec:
  provider: azure
  parameters:
    tenantId: "c87cdf06-bc04-4c92-9a1e-7e1cab14c979"
    keyvaultName: "keyvault-fider"
    clientID: "9b138bb9-7f52-4a0b-bef0-7786d4f9ef6b"
    objects: |
      array:
        - |
          objectName: postgres-user
          objectType: secret
        - |
          objectName: postgres-password
          objectType: secret
        - |
          objectName: blob-sas-url
          objectType: secret
  secretObjects:
    - secretName: postgres-secrets
      type: Opaque
      data:
        - key: POSTGRES_USER
          objectName: postgres-user
        - key: POSTGRES_PASSWORD
          objectName: postgres-password
    - secretName: blob-sas-secret
      type: Opaque
      data:
        - key: AZURE_BLOB_CONTAINER_SAS_URL
          objectName: blob-sas-url
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: fider-prod
spec:
  selector:
    app: postgres
  ports:
    - name: postgres
      port: 5432
      targetPort: 5432
  type: ClusterIP
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: fider-prod
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      serviceAccountName: postgres-sa
      securityContext:
        fsGroup: 999
      volumes:
        - name: kv
          csi:
            driver: secrets-store.csi.k8s.io
            readOnly: true
            volumeAttributes:
              secretProviderClass: "azure-kv-database"
      initContainers:
        - name: fix-perms
          image: busybox:1.36
          command: ["sh","-c","mkdir -p /var/lib/postgresql/data/pgdata && chown -R 999:999 /var/lib/postgresql/data"]
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
      containers:
        - name: postgres
          image: postgres:16
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5432
          env:
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
            - name: POSTGRES_DB
              value: "fiderdb"
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secrets
                  key: POSTGRES_PASSWORD
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
            - name: kv
              mountPath: /mnt/secrets-store
              readOnly: true
          readinessProbe:
            exec:
              command: ["sh","-c","pg_isready -U \"$POSTGRES_USER\" -d \"$POSTGRES_DB\""]
            initialDelaySeconds: 10
            periodSeconds: 5
            failureThreshold: 12
          livenessProbe:
            tcpSocket:
              port: 5432
            initialDelaySeconds: 120
            periodSeconds: 10
            failureThreshold: 6
          resources:
            requests:
              cpu: "100m"
              memory: "256Mi"
            limits:
              cpu: "500m"
              memory: "1Gi"
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 5Gi
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: pg-backup-to-blob
  namespace: fider-prod
spec:
  schedule: "0 0 * * *"  # 00:00 UTC ~ 02:00 Paris (heure d'été)
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      backoffLimit: 2
      template:
        spec:
          serviceAccountName: postgres-sa
          restartPolicy: Never
          containers:
            - name: backup
              image: postgres:16
              imagePullPolicy: IfNotPresent
              securityContext:
                runAsUser: 0
              env:
                - name: DB_HOST
                  value: "postgres.fider-prod.svc.cluster.local"
                - name: DB_NAME
                  value: "fiderdb"
                - name: PGPASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: postgres-secrets
                      key: POSTGRES_PASSWORD
              envFrom:
                - secretRef:
                    name: postgres-secrets
                - secretRef:
                    name: blob-sas-secret
              resources:
                requests:
                  cpu: "100m"
                  memory: "128Mi"
                limits:
                  cpu: "500m"
                  memory: "512Mi"
              command: ["/bin/sh","-c"]
              args:
                - |
                  set -euo pipefail

                  # Paquets utiles (si wget/tar/ca-certs manquent)
                  apt-get update -y
                  apt-get install -y --no-install-recommends ca-certificates wget tar
                  update-ca-certificates

                  TS="$(date -u +%F-%H%M%S)"
                  DUMP="/tmp/${DB_NAME}-${TS}.dump"

                  echo "[1/4] pg_dump..."
                  pg_dump -h "${DB_HOST}" -U "${POSTGRES_USER}" -d "${DB_NAME}" -Fc -f "${DUMP}"

                  echo "[2/4] Téléchargement AzCopy..."
                  TMPDIR="$(mktemp -d)"
                  cd "${TMPDIR}"
                  wget -q https://aka.ms/downloadazcopy-v10-linux -O azcopy.tgz
                  tar -xzf azcopy.tgz
                  AZDIR="$(find . -maxdepth 1 -type d -name 'azcopy_linux_amd64_*' | head -n 1)"
                  AZ="${AZDIR}/azcopy"
                  chmod +x "$AZ"

                  echo "[3/4] Upload vers Blob (SAS)..."
                  YEAR="$(date -u +%Y)"; MONTH="$(date -u +%m)"
                  DEST="${AZURE_BLOB_CONTAINER_SAS_URL}/pg/${DB_NAME}/${YEAR}/${MONTH}/${DB_NAME}-${TS}.dump"

                  "$AZ" copy "${DUMP}" "${DEST}" --from-to=LocalBlob --check-length=true

                  echo "[4/4] Nettoyage."
                  rm -f "${DUMP}"
                  rm -rf "${TMPDIR}"
                  echo "Backup OK -> ${DEST}"
